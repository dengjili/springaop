<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<!-- 基础bean -->
	<bean id="testService" class="priv.dengjl.springaop.service.TestService">
		<property name="name" value="呵呵哒" />
		<property name="url" value="www.mmp.com" />
	</bean>
	
	<!-- 切入点,想拦截哪些方法，更加细粒度 -->
	<bean id="testPointcut" class="priv.dengjl.springaop.advisor.MyPointcut">
		<property name="addMappingName" value="printName"/>
	</bean>  
	
	<!-- 使用DefaultPointcutAdvisor -->
	<bean id="testAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">  
      <property name="pointcut">  
          <ref bean="testPointcut" />  
      </property>  
      <property name="advice">  
          <ref bean="testBeforeAdvice"/>  
      </property>  
    </bean>  
    
    <!-- 使用RegexpMethodPointcutAdvisor -->
    <bean id="regexpAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">  
      <property name="patterns">  
          <list>
          		<!-- 参考java pattern类正则表达式配置  这是匹配printURL方法 -->
          		<value>.*URL.*</value>
          </list> 
      </property>  
      <property name="advice">  
          <ref bean="testAfterAdvice"/>  
      </property>  
    </bean>  
    
    <!-- 使用NameMatchMethodPointcutAdvisor *完全匹配 -->
    <bean id="myAroundAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">    
      <property name="mappedNames">  
        <list>  
          <value>*ThrowException*</value>  
        </list>  
      </property>  
      <property name="advice">  
        <ref bean="testAroundMethod" />  
      </property>  
    </bean>  
	
	<!-- 静态代理类bean -->
	<!-- <bean id="serviceProxy" 
                 class="org.springframework.aop.framework.ProxyFactoryBean">
		被代理对象
		<property name="target" ref="testService" />

		配置被代理对象需要处理的动作
		<property name="interceptorNames">
			<list>
				<value>testAdvisor</value>
				<value>regexpAdvisor</value>
				<value>myAroundAdvisor</value>
			</list>
		</property>
	</bean> -->
	<!-- 动态代理类bean -->
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <list>
                <value>*Service</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>testAdvisor</value>
			    <value>regexpAdvisor</value>
				<value>myAroundAdvisor</value>
            </list>
        </property>
    </bean>
    
    <!-- DefaultAdvisorAutoProxyCreator 是非常强大的，如果有 bean 相关连，Spring会自动创建一个代理,不建议使用，应当显示说明 -->
    <!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" /> -->
	
	<bean id="testBeforeAdvice" class="priv.dengjl.springaop.aop.TestBeforeAdvice" />
	<bean id="testBeforeAdvice2" class="priv.dengjl.springaop.aop.TestBeforeAdvice2" />
	<bean id="testAfterAdvice" class="priv.dengjl.springaop.aop.TestAfterAdvice" />
	<bean id="testAfterAdvice2" class="priv.dengjl.springaop.aop.TestAfterAdvice2" />
	<bean id="testThrowException" class="priv.dengjl.springaop.aop.TestThrowException" />
	<bean id="testAroundMethod" class="priv.dengjl.springaop.aop.TestAroundMethod" />

</beans>